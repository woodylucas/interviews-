/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

*/

function sumOfMultiples(n) {
  let sum = 0;
  for (let i = 0; i < n; i++) {
    if (i % 3 === 0 || i % 5 === 0) {
      sum += i;
    }
  }
  return sum;
}

// console.log(sumOfMultiples(10));

/* 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

function fibEven(n) {
  const lastTwo = [1, 2];
  let nextFib = lastTwo[0] + lastTwo[1];
  const sum = [2];

  while (nextFib < n) {
    if (nextFib % 2 === 0) {
      sum.push(nextFib);
    }
    lastTwo[0] = lastTwo[1];
    lastTwo[1] = nextFib;
    nextFib = lastTwo[0] + lastTwo[1];
  }
  return sum.reduce((acc, curr) => {
    return (acc += curr);
  }, 0);
}

// console.log(fibEven(10));

// console.log(180 / 2);

/*
 The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
 
 */

function largetPrime(n) {
  let root = Math.ceil(Math.sqrt(n));
  let divisor = 2;
  while (root > 1) {
    if (root % divisor === 0 && isPrime(root)) {
      root /= divisor;
    } else {
      divisor++;
    }
  }
  return divisor;
}

console.log(largetPrime(180));

function isPrime(n) {
  // A prime number is a natural number greater than 1, and has no postive divisor other than 1 and itself
  if (n === 2) return true;

  if (n < 2 || !Number.isInteger(n) || !(n % 2)) {
    return false;
  }
  // modulous operator remainder of the division
  let root = Math.ceil(Math.sqrt(n));

  for (let i = 2; i <= root; i++) {
    if (n % i === 0) return false;
  }
  return true;
}
